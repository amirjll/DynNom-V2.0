{
    "collab_server" : "",
    "contents" : "utils::globalVariables(c(\"counter\", \"Prediction\", \"input.data\", \"old.d\", \"old.d2\", \"surv\", \"event\", \"n.risk\", \"part\"))\n\nDynNom.coxph <- function(model, data,\n                         clevel = 0.95, covariate = c(\"slider\", \"numeric\"),\n                         ptype = c(\"st\", \"1-st\")) {\n\n  data <- data.frame(data)\n\n  if (length(dim(data)) > 2)\n    stop(\"Error in data format: dataframe format required\")\n\n  if (attr(model$terms, \"dataClasses\")[[1]] == \"logical\")\n    stop(\"Error in model syntax: logical form for response not supported\")\n\n  if (tail(names(attr(model$terms,\"dataClasses\")),n=1)==\"(weights)\") {\n    n.terms <- length(attr(model$terms,\"dataClasses\"))\n    attr(model$terms,\"dataClasses\") <- attr(model$terms,\"dataClasses\")[1:n.terms - 1]\n  }\n\n  if (attr(model, \"class\")[1] == \"coxph.null\") {\n    stop(\"Error in model syntax: the model is null\")\n  }\n\n  n.strata <- length(attr(model$terms, \"specials\")$strata)\n  dim.terms <- length(names(attr(model$terms, \"dataClasses\")))\n\n  for (i in 2:dim.terms) {\n    if (substr(names(attr(model$terms, \"dataClasses\"))[i], 1, 6) == \"strata\") {\n      nch <- nchar(names(attr(model$terms, \"dataClasses\"))[i])\n      names(attr(model$terms, \"dataClasses\"))[i] <- substr(names(attr(model$terms,\n                                                                      \"dataClasses\"))[i], 8, (nch - 1))\n    }\n  }\n\n  if (!is.null(attr(model$terms, \"specials\")$tt)) {\n    stop(\"Error in model syntax: coxph models with a time dependent covariate is not supported\")\n  }\n\n  for(i in 2:length(names(attr(model$terms, \"dataClasses\")))) {\n    com1=numeric(length(names(data)))\n    for(j in 1:length(names(data))) {\n      if (names(attr(model$terms, \"dataClasses\"))[i]==names(data)[j]) com1[j]=1\n    }\n    if (sum(com1)==0)\n      stop(\"Error in model syntax: some of model's terms do not match to variables' name in dataset\")\n  }\n\n  covariate <- match.arg(covariate)\n  ptype <- match.arg(ptype)\n  input.data <- NULL\n  old.d <- NULL\n\n  n.strata <- length(attr(model$terms, \"specials\")$strata)\n\n  runApp(list(\n\n    ui = bootstrapPage(fluidPage(\n      titlePanel(\"Dynamic Nomogram\"),\n      sidebarLayout(sidebarPanel(uiOutput(\"manySliders.f\"),\n                                 uiOutput(\"manySliders.n\"),\n                                 checkboxInput(\"trans\", \"Alpha blending (transparency)\", value = TRUE),\n                                 actionButton(\"add\", \"Predict\"),\n                                 br(), br(),\n                                 helpText(\"Press Quit to exit the application\"),\n                                 actionButton(\"quit\", \"Quit\")\n      ),\n      mainPanel(tabsetPanel(id = \"tabs\",\n                            tabPanel(\"Estimated S(t)\", plotOutput(\"plot\")),\n                            tabPanel(\"Predicted Survival\", plotOutput(\"plot2\")),\n                            tabPanel(\"Numerical Summary\", verbatimTextOutput(\"data.pred\")),\n                            tabPanel(\"Model Summary\", verbatimTextOutput(\"summary\"))\n      )\n      )\n      ))),\n\n    server = function(input, output){\n\n      observe({\n        if (input$quit == 1)\n          stopApp()\n      })\n\n      neededVar <- names(attr(model$terms, \"dataClasses\"))[-1]\n      if (length(attr(model$terms, \"term.labels\")) == 1) {\n        input.data <<- data.frame(data[1, neededVar])\n        names(input.data)[1] <<- names(attr(model$terms, \"dataClasses\"))[-1]\n      } else {\n        input.data <<- data[1, neededVar]\n      }\n      input.data[1, ] <<- NA\n\n      b <- 1\n      i.factor <- NULL\n      i.numeric <- NULL\n      for (j in 2:length(attr(model$terms, \"dataClasses\"))) {\n        for (i in 1:length(data)) {\n          if (names(attr(model$terms, \"dataClasses\"))[j] == names(data)[i]) {\n            if (attr(model$terms, \"dataClasses\")[[j]] == \"factor\" |\n                attr(model$terms, \"dataClasses\")[[j]] == \"ordered\" |\n                attr(model$terms, \"dataClasses\")[[j]] == \"logical\") {\n              i.factor <- rbind(i.factor, c(names(attr(model$terms, \"dataClasses\"))[j], j, i, b))\n              (break)()\n            }\n            if (attr(model$terms, \"dataClasses\")[[j]] == \"numeric\") {\n              i.numeric <- rbind(i.numeric, c(names(attr(model$terms, \"dataClasses\"))[j], j, i))\n              b <- b + 1\n              (break)()\n            }\n          }\n        }\n      }\n\n      tt <- names(attr(model$terms, \"dataClasses\"))[1]\n      dd <- unlist(strsplit(substr(tt, 6, nchar(tt) - 1), \"[,]\"))\n      tim <- dd[1]\n      sts <- substr(dd[2], 2, nchar(dd[2]))\n\n      if (length(attr(model$terms, \"term.labels\")) == 1) {\n        input.data <<- data.frame(cbind(stt = NA, ti = NA, cov = NA), NO=NA)\n        names(input.data)[3] <<- paste(attr(model$terms, \"term.labels\"))\n        names(input.data)[1:2] <<- c(paste(sts), paste(tim))\n      } else {\n        data1 <- data[, neededVar]\n        input.data <<- cbind(stt = NA, ti = NA, data1[1, ], NO=NA)\n        names(input.data)[1:2] <<- c(paste(sts), paste(tim))\n        input.data[1, ] <<- NA\n      }\n\n      if (length(i.numeric) == 0) {\n        i.numeric <- matrix(ncol = 3)\n        i.numeric <- rbind(i.numeric, V1 = paste(tim))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data) == i.numeric[dim(i.numeric)[1],1])\n        i.numeric <- rbind(i.numeric, V1 = paste(sts))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data) == i.numeric[dim(i.numeric)[1], 1])\n        i.numeric <- i.numeric[-1, ]\n      } else {\n        i.numeric <- rbind(i.numeric, V1 = paste(tim))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data) == i.numeric[dim(i.numeric)[1], 1])\n        i.numeric <- rbind(i.numeric, V1 = paste(sts))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data) == i.numeric[dim(i.numeric)[1], 1])\n      }\n\n      limits0 <- c(0, as.integer(quantile(na.omit(data[,as.numeric(i.numeric[dim(i.numeric)[1] - 1, 3])]), probs = 0.7)))\n\n      nn <- nrow(i.numeric)\n      if (is.null(nn)) {\n        nn <- 0\n      }\n      nf <- nrow(i.factor)\n      if (is.null(nf)) {\n        nf <- 0\n      }\n\n      if (nf > 0) {\n        output$manySliders.f <- renderUI({\n          slide.bars <- list(lapply(1:nf, function(j) {\n            selectInput(paste(\"factor\", j, sep = \"\"),\n                        names(attr(model$terms, \"dataClasses\")[as.numeric(i.factor[j, 2])]),\n                        model$xlevels[[as.numeric(i.factor[j, 2]) - as.numeric(i.factor[j, 4])]], multiple = FALSE)\n          }))\n          do.call(tagList, slide.bars)\n        })\n      }\n\n      if (nn > 1) {\n        output$manySliders.n <- renderUI({\n          if (covariate == \"slider\") {\n            if (nn > 2){\n              slide.bars <- list(lapply(1:(nn - 2), function(j) {\n                sliderInput(paste(\"numeric\", j, sep = \"\"), i.numeric[j, 1],\n                            min = as.integer(min(na.omit(data[, as.numeric(i.numeric[j, 3])]))),\n                            max = as.integer(max(na.omit(data[, as.numeric(i.numeric[j, 3])]))) + 1,\n                            value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[j, 3])]))))\n              }), br(), checkboxInput(\"times\", \"Predicted Survival at this Follow Up:\"),\n              conditionalPanel(condition = \"input.times == true\",\n                               sliderInput(paste(\"numeric\", (nn - 1), sep = \"\"), i.numeric[(nn - 1), 1],\n                                           min = as.integer(min(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))),\n                                           max = as.integer(max(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))) + 1,\n                                           value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))))))\n            }\n            if (nn == 2){\n              slide.bars <- list(br(), checkboxInput(\"times\", \"Predicted Survival at this Follow Up:\"),\n              conditionalPanel(condition = \"input.times == true\",\n                               sliderInput(paste(\"numeric\", (nn - 1), sep = \"\"), i.numeric[(nn - 1), 1],\n                                           min = as.integer(min(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))),\n                                           max = as.integer(max(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))) + 1,\n                                           value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))))))\n            }\n          }\n\n          if (covariate == \"numeric\") {\n            if (nn > 2){\n              slide.bars <- list(lapply(1:(nn - 2), function(j) {\n                numericInput(paste(\"numeric\", j, sep = \"\"), i.numeric[j, 1],\n                             value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[j, 3])]))))\n              }), br(), checkboxInput(\"times\", \"Predicted Survival at this Follow Up:\"),\n              conditionalPanel(condition = \"input.times == true\",\n                               numericInput(paste(\"numeric\", (nn - 1), sep = \"\"), i.numeric[(nn - 1), 1],\n                                            value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))))))\n            }\n            if (nn == 2){\n              slide.bars <- list(br(), checkboxInput(\"times\", \"Predicted Survival at this Follow Up:\"),\n              conditionalPanel(condition = \"input.times == true\",\n                               numericInput(paste(\"numeric\", (nn - 1), sep = \"\"), i.numeric[(nn - 1), 1],\n                                            value = as.integer(mean(na.omit(data[, as.numeric(i.numeric[(nn - 1), 3])]))))))\n            }\n          }\n          do.call(tagList, slide.bars)\n        })\n      }\n\n      a <- 0\n      new.d <- reactive({\n        if (nf > 0) {\n          input.f <- vector(\"list\", nf)\n          for (i in 1:nf) {\n            input.f[[i]] <- local({\n              input[[paste(\"factor\", i, sep = \"\")]]\n            })\n            names(input.f)[i] <- i.factor[i, 1]\n          }\n        }\n        if (nn > 1) {\n          input.n <- vector(\"list\", (nn - 1))\n          for (i in 1:(nn - 1)) {\n            input.n[[i]] <- local({\n              input[[paste(\"numeric\", i, sep = \"\")]]\n            })\n            names(input.n)[i] <- i.numeric[i, 1]\n          }\n        }\n        if (nn == 0) {\n          out <- data.frame(do.call(\"cbind\", input.f))\n        }\n        if (nf == 0) {\n          out <- data.frame(do.call(\"cbind\", input.n))\n        }\n        if (nf > 0 & nn > 0) {\n          out <- data.frame(do.call(\"cbind\", input.f), do.call(\"cbind\", input.n))\n        }\n        if (a == 0) {\n          wher <- match(names(out), names(input.data)[-1])\n          out2 <- cbind(out[wher], NO=input$add)\n          input.data <<- rbind(input.data[-1], out2)\n        }\n        if (a > 0) {\n          wher <- match(names(out), names(input.data))\n          out2 <- cbind(out[wher], NO=input$add)\n          input.data <<- rbind(input.data, out2)\n        }\n        a <<- a + 1\n        out\n      })\n\n      p1 <- NULL\n      old.d <- NULL\n      data2 <- reactive({\n        if (input$add == 0)\n          return(NULL)\n        if (input$add > 0) {\n          OUT <- isolate({\n            if (isTRUE(compare(old.d, new.d())) == FALSE) {\n              new.d <- cbind(stat = 1, new.d())\n              names(new.d)[1] <- paste(sts)\n              if (n.strata > 0) {\n                pred <- predict(model, newdata = new.d, se.fit = TRUE,\n                                conf.int = clevel, type = \"expected\", reference = \"strata\")\n              }\n              if (n.strata == 0) {\n                pred <- predict(model, newdata = new.d, se.fit = TRUE,\n                                conf.int = clevel, type = \"expected\")\n              }\n              upb <- exp(-(pred$fit - (qnorm(1 - (1 - clevel)/2) * pred$se.fit)))\n              if (upb > 1) {\n                upb <- 1\n              }\n              lwb <- exp(-(pred$fit + (qnorm(1 - (1 - clevel)/2) * pred$se.fit)))\n              if (ptype == \"st\") {\n                d.p <- data.frame(Prediction = exp(-pred$fit), Lower.bound = lwb,\n                                  Upper.bound = upb)\n              }\n              if (ptype == \"1-st\") {\n                d.p <- data.frame(Prediction = 1 - exp(-pred$fit), Lower.bound = 1 - upb,\n                                  Upper.bound = 1 - lwb)\n              }\n\n              old.d <<- new.d()\n              data.p <- cbind(d.p, counter = 1, NO=input$add)\n              p1 <<- rbind(p1, data.p)\n              p1$count <- seq(1, dim(p1)[1])\n              p1\n            } else {\n              p1$count <- seq(1, dim(p1)[1])\n              OUT <- p1\n            }\n          })\n        }\n        OUT\n      })\n\n      s.fr <- NULL\n      old.d2 <- NULL\n      b <- 1\n      St <- TRUE\n\n      if (n.strata > 0) {\n        sub.fit1 <- reactive({\n          nam <- NULL\n          aa <- 0\n          fit1 <- survfit(model, newdata = new.d())\n          l.s <- attr(model$terms, \"specials\")$strata\n          for (i in l.s) {\n            nam0 <- paste(new.d()[[which(i.factor[, 2] == i)]], sep = \"\")\n            if (aa == 0) {\n              nam <- paste(nam0)\n            }\n            if (aa > 0) {\n              nam <- paste(nam, \", \", nam0, sep = \"\")\n            }\n            aa <- aa + 1\n          }\n          sub.fit1 <- subset(as.data.frame(summary(fit1)[2:8]), strata == nam)\n          return(sub.fit1)\n        })\n      }\n\n      dat.p <- reactive({\n        if (isTRUE(compare(old.d2, new.d())) == FALSE) {\n          s.frame <- isolate({\n            fit1 <- survfit(model, newdata = new.d())\n            if (n.strata == 0) {\n              sff <- as.data.frame(summary(fit1)[2:8])\n              sff <- cbind(sff, event=1-sff[[5]], part = b)\n              if (sff$time[1] != 0){\n                sff2 <- sff[1, ]\n                sff2[1, ] <- NA\n                sff2$time[1] <- 0\n                sff2$n.risk[1] <- model$n\n                sff2$surv[1] <- 1\n                sff2$event[1] <- 0\n                sff2$part[1] <- sff$part[1]\n                s.f <- rbind(sff2, sff)\n              } else {\n                s.f <- sff\n              }\n            }\n            if (n.strata > 0) {\n              sff <- cbind(sub.fit1(), part = b)\n              sff <- cbind(sff, event=1-sff[[6]])\n              if (sff$time[1] != 0) {\n                sff2 <- sff[1, ]\n                sff2[1, ] <- NA\n                sff2$time[1] <- 0\n                sff2$n.risk[1] <- sff[1,2]\n                sff2$surv[1] <- 1\n                sff2$event[1] <- 0\n                sff2$part[1] <- sff$part[1]\n                s.f <- rbind(sff2, sff)\n              } else {\n                s.f <- sff\n              }\n              s.f$n.risk <- s.f$n.risk/s.f$n.risk[1]\n            }\n            if (dim(s.f)[1] < 3) {\n              St <<- FALSE\n              stop(\"Error in data structure: There is not enough data in the current strata level\")\n            }\n            s.fr <<- rbind(s.fr, s.f)\n            old.d2 <<- new.d()\n            b <<- b + 1\n            s.fr\n          })\n        } else {\n          s.frame <- isolate({\n            s.fr\n          })\n        }\n      })\n\n      output$plot <- renderPlot({\n        if (St == TRUE) {\n          if (input$add == 0)\n            return(NULL)\n          if (input$add > 0) {\n            if (input$trans == TRUE) {\n              if (ptype == \"st\") {\n                pl <- isolate({\n                  p2 <- ggplot(data = dat.p())\n                  p2 <- p2 + geom_step(aes(x = time, y = surv, alpha = n.risk, color = as.factor(part), group = part))\n                  p2 <- p2 + ylim(0, 1) + xlim(0, max(dat.p()$time) * 1.05)\n                  p2 <- p2 + labs(title = \"Estimated Survival Probability\", x = \"Follow Up Time\", y = \"S(t)\") + theme_bw()\n                  p2 <- p2 + theme(text = element_text(face = \"bold\", size = 14), legend.position = \"none\")\n                })\n              }\n              if (ptype == \"1-st\") {\n                pl <- isolate({\n                  p2 <- ggplot(data = dat.p())\n                  p2 <- p2 + geom_step(aes(x = time, y = event, alpha = n.risk, color = as.factor(part), group = part))\n                  p2 <- p2 + ylim(0, 1) + xlim(0, max(dat.p()$time) * 1.05)\n                  p2 <- p2 + labs(title = \"Estimated Probability\", x = \"Follow Up Time\", y = \"F(t)\")\n                  p2 <- p2 + theme_bw() + theme(text = element_text(face = \"bold\", size = 14), legend.position = \"none\")\n                })\n              }\n            }\n            if (input$trans == FALSE) {\n              if (ptype == \"st\") {\n                pl <- isolate({\n                  p2 <- ggplot(data = dat.p())\n                  p2 <- p2 + geom_step(aes(x = time, y = surv, color = as.factor(part), group = part))\n                  p2 <- p2 + ylim(0, 1) + xlim(0, max(dat.p()$time) * 1.05)\n                  p2 <- p2 + labs(title = \"Estimated Survival Probability\", x = \"Follow Up Time\", y = \"S(t)\") + theme_bw()\n                  p2 <- p2 + theme(text = element_text(face = \"bold\", size = 14), legend.position = \"none\")\n                })\n              }\n              if (ptype == \"1-st\") {\n                pl <- isolate({\n                  p2 <- ggplot(data = dat.p())\n                  p2 <- p2 + geom_step(aes(x = time, y = event, color = as.factor(part), group = part))\n                  p2 <- p2 + ylim(0, 1) + xlim(0, max(dat.p()$time) * 1.05)\n                  p2 <- p2 + labs(title = \"Estimated Probability\", x = \"Follow Up Time\", y = \"F(t)\")\n                  p2 <- p2 + theme_bw() + theme(text = element_text(face = \"bold\", size = 14), legend.position = \"none\")\n                })\n              }\n            }\n          }\n          data2()\n          print(pl)\n        }\n        if (St == FALSE) {\n          print(\"Restart the application\")\n        }\n      })\n\n      output$plot2 <- renderPlot({\n        if (input$add == 0)\n          return(NULL)\n        isolate({\n          if (is.null(new.d()))\n            return(NULL)\n          lim <- c(0, 1)\n          yli <- c(0 - 0.5, 10 + 0.5)\n          if (dim(input.data)[1] > 11)\n            yli <- c(dim(input.data)[1] - 11.5, dim(input.data)[1] - 0.5)\n          p <- ggplot(data = data2(), aes(x = Prediction, y = 0:(sum(counter) - 1)))\n          p <- p + geom_point(size = 4, colour = data2()$count, shape = 15)\n          p <- p + ylim(yli[1], yli[2]) + coord_cartesian(xlim = lim)\n          p <- p + geom_errorbarh(xmax = data2()$Upper.bound, xmin = data2()$Lower.bound,\n                           size = 1.45, height = 0.4, colour = data2()$count)\n          if (ptype == \"st\") {\n            p <- p + labs(title = paste(clevel * 100, \"% \", \"Confidence Interval for Survival Probability\", sep = \"\"),\n                          x = \"Survival Probability\", y = NULL)\n          }\n          if (ptype == \"1-st\") {\n            p <- p + labs(title = paste(clevel * 100, \"% \", \"Confidence Interval for F(t)\", sep = \"\"),\n                          x = \"Probability\", y = NULL)\n          }\n          p <- p + theme_bw() + theme(axis.text.y = element_blank(), text = element_text(face = \"bold\", size = 14))\n          print(p)\n        })\n        data2()\n      })\n\n      output$data.pred <- renderPrint({\n        if (input$add > 0) {\n          isolate({\n            if (nrow(data2() > 0)) {\n              di <- ncol(input.data)\n              data.p <- merge(input.data[-1, ], data2()[1:5], by=\"NO\")\n              data.p <- data.p[, !(colnames(data.p) %in% c(\"NO\", \"counter\"))]\n              stargazer(data.p, summary = FALSE, type = \"text\")\n            }\n          })\n        }\n      })\n\n      output$summary <- renderPrint({\n        coef.c <- exp(model$coef)\n        ci.c <- exp(suppressMessages(confint(model, level = clevel)))\n        stargazer(model, coef = list(coef.c), ci.custom = list(ci.c), p.auto = F,\n                  type = \"text\", omit.stat = c(\"LL\", \"ser\", \"f\"), ci = TRUE, ci.level = clevel,\n                  single.row = TRUE, title = paste(\"Cox model:\", model$call[2], sep = \" \"))\n      })\n    }\n  )\n  )\n}\n",
    "created" : 1473851546781.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2619702730",
    "id" : "C2327BBB",
    "lastKnownWriteTime" : 1446032561,
    "last_content_update" : 1446032561,
    "path" : "C:/Users/Amir/Dropbox/Projects/DynNom project/DynNom V2.0/DynNom/R/DynNom_coxph.R",
    "project_path" : "R/DynNom_coxph.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}